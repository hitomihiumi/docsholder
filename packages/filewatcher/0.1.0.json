{"name":"filewatcher","version":"0.1.0","custom":{},"classes":[{"data":{"name":"FileWatcher","abstract":false,"constructor":{"name":"FileWatcher","description":"Create a FileWatcher.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"processId","description":"The process ID.","optional":true,"default":null,"type":"number","rawType":["number"]}],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":24},"constructor":"new FileWatcher"},"metadata":{"name":"FileWatcher.ts","directory":"src","line":10},"deprecated":false,"description":"Class representing a file watcher.","extends":"EventEmitter","implements":null,"rawExtends":["EventEmitter"],"rawImplements":null,"methods":[{"name":"[captureRejectionSymbol]","description":null,"see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"error","description":null,"optional":false,"default":null,"type":"Error","rawType":["Error"]},{"name":"event","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"args","description":null,"optional":false,"default":null,"type":"AnyRest","rawType":["AnyRest"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":136}},{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":null,"optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":597}},{"name":"captureInitialFiles","description":"Capture the initial files in a directory.","see":[],"static":false,"private":true,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directory","description":"The directory to capture initial files from.","optional":false,"default":null,"type":"string","rawType":["string"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":115}},{"name":"emit","description":"Synchronously calls each of the listeners registered for the event named `eventName`, in the order they were registered, passing the supplied arguments\nto each.\n\nReturns `true` if the event had listeners, `false` otherwise.\n\n```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"args","description":null,"optional":false,"default":null,"type":"AnyRest","rawType":["AnyRest"]}],"returns":{"type":"boolean","rawType":["boolean"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":859}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.\n\n```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[],"returns":{"type":"Array<string | symbol>","rawType":["Array","<","string","symbol",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":922}},{"name":"findHandler","description":"Find a handler for a specific event type in a directory.","see":[],"static":false,"private":true,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directory","description":"The directory to find the handler for.","optional":false,"default":null,"type":"string","rawType":["string"]},{"name":"eventType","description":"The event type.","optional":false,"default":null,"type":"'add' | 'change' | 'unlink'","rawType":["'","add","'","'","change","'","'","unlink","'"]}],"returns":{"type":"undefined | (\n  directory: string,\n  filename: string,\n  relativePath: string,\n  eventType: 'add' | 'change' | 'unlink'\n) => void","rawType":["undefined","(\n  ","directory: string","filename: string","relativePath: string","eventType: ',add,',',change,',',unlink,'","\n) => ","void"],"description":"The handler function or undefined if not found."},"metadata":{"name":"FileWatcher.ts","directory":"src","line":70}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to EventEmitter.defaultMaxListeners.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":774}},{"name":"handleEvent","description":"Handle a file system event.","see":[],"static":false,"private":true,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventType","description":"The event type.","optional":false,"default":null,"type":"'add' | 'change' | 'unlink'","rawType":["'","add","'","'","change","'","'","unlink","'"]},{"name":"directory","description":"The directory where the event occurred.","optional":false,"default":null,"type":"string","rawType":["string"]},{"name":"filePath","description":"The path of the file that triggered the event.","optional":false,"default":null,"type":"string","rawType":["string"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":91}},{"name":"ignoreDirectory","description":"Ignore specific directories.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directory","description":"The directories to ignore.","optional":false,"default":null,"type":"Array<string>","rawType":["Array","<","string",">"]}],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":"The current FileWatcher instance."},"metadata":{"name":"FileWatcher.ts","directory":"src","line":177}},{"name":"listenerCount","description":"Returns the number of listeners listening for the event named `eventName`.\nIf `listener` is provided, it will return how many times the listener is found\nin the list of the listeners of the event.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The event handler function","optional":true,"default":null,"type":"Function","rawType":["Function"]}],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":868}},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\n```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"Array<Function>","rawType":["Array","<","Function",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":787}},{"name":"off","description":"Alias for `emitter.removeListener()`.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":null,"optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":747}},{"name":"on","description":"Adds the `listener` function to the end of the listeners array for the event\nnamed `eventName`. No checks are made to see if the `listener` has already\nbeen added. Multiple calls passing the same combination of `eventName` and\n`listener` will result in the `listener` being added, and called, multiple times.\n\n```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The `emitter.prependListener()` method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event.","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The callback function","optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":629}},{"name":"once","description":"Adds a **one-time** `listener` function for the event named `eventName`. The\nnext time `eventName` is triggered, this listener is removed and then invoked.\n\n```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The `emitter.prependOnceListener()` method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event.","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The callback function","optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":659}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`\nand `listener` will result in the `listener` being added, and called, multiple times.\n\n```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event.","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The callback function","optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":886}},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.\n\n```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event.","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The callback function","optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":902}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).\n\n```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"Array<Function>","rawType":["Array","<","Function",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":818}},{"name":"removeAllListeners","description":"Removes all listeners, or those of the specified `eventName`.\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":true,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":758}},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named `eventName`.\n\n```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```\n\n`removeListener()` will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified `eventName`, then `removeListener()` must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any `removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from`emit()` in progress. Subsequent events behave as expected.\n\n```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe `emitter.listeners()` method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), `removeListener()` will remove the most\nrecently added instance. In the example the `once('ping')` listener is removed:\n\n```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":null,"optional":false,"default":null,"type":"(\n  args: Array<any>\n) => void","rawType":["(\n  ","args: Array,<,any,>","\n) => ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":742}},{"name":"setAllowedExtensions","description":"Set the allowed file extensions to watch.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"extensions","description":"The file extensions to allow.","optional":false,"default":null,"type":"Array<string>","rawType":["Array","<","string",">"]}],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":"The current FileWatcher instance."},"metadata":{"name":"FileWatcher.ts","directory":"src","line":209}},{"name":"setHandler","description":"Set a handler for a specific event type in a directory.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directory","description":"The directory to set the handler for.","optional":false,"default":null,"type":"string","rawType":["string"]},{"name":"eventType","description":"The event type.","optional":false,"default":null,"type":"'add' | 'change' | 'unlink'","rawType":["'","add","'","'","change","'","'","unlink","'"]},{"name":"callback","description":"The handler function.","optional":false,"default":null,"type":"(\n  directory: string,\n  filename: string,\n  relativePath: string,\n  eventType: 'add' | 'change' | 'unlink'\n) => void","rawType":["(\n  ","directory: string","filename: string","relativePath: string","eventType: ',add,',',change,',',unlink,'","\n) => ","void"]}],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":160}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`) to indicate an unlimited number of listeners.\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"n","description":null,"optional":false,"default":null,"type":"number","rawType":["number"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":768}},{"name":"setMonitoredDirectories","description":"Set the directories to monitor.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directories","description":"The directories to monitor.","optional":false,"default":null,"type":"Array<string>","rawType":["Array","<","string",">"]}],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":"The current FileWatcher instance."},"metadata":{"name":"FileWatcher.ts","directory":"src","line":219}},{"name":"startWatching","description":"Start watching the directories.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":130}},{"name":"stopWatching","description":"Stop watching all directories.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":146}},{"name":"unignoreDirectory","description":"Unignore specific directories.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directory","description":"The directories to unignore.","optional":false,"default":null,"type":"Array<string>","rawType":["Array","<","string",">"]}],"returns":{"type":"FileWatcher","rawType":["FileWatcher"],"description":"The current FileWatcher instance."},"metadata":{"name":"FileWatcher.ts","directory":"src","line":193}},{"name":"watchDirectory","description":"Watch a directory for changes.","see":[],"static":false,"private":true,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"directory","description":"The directory to watch.","optional":false,"default":null,"type":"string","rawType":["string"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"FileWatcher.ts","directory":"src","line":41}},{"name":"addAbortListener","description":"Listens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"signal","description":null,"optional":false,"default":null,"type":"AbortSignal","rawType":["AbortSignal"]},{"name":"resource","description":null,"optional":false,"default":null,"type":"(\n  event: Event\n) => void","rawType":["(\n  ","event: Event","\n) => ","void"]}],"returns":{"type":"Disposable","rawType":["Disposable"],"description":"Disposable that removes the `abort` listener."},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":437}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap> | EventTarget","rawType":["EventEmitter","<","DefaultEventMap",">","EventTarget"]},{"name":"name","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"Array<Function>","rawType":["Array","<","Function",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":358}},{"name":"getMaxListeners","description":"Returns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap> | EventTarget","rawType":["EventEmitter","<","DefaultEventMap",">","EventTarget"]}],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":387}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":true,"parameters":[{"name":"emitter","description":"The emitter to query","optional":false,"default":null,"type":"EventEmitter<DefaultEventMap>","rawType":["EventEmitter","<","DefaultEventMap",">"]},{"name":"eventName","description":"The event name","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":330}},{"name":"on","description":"```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```\n\nUse the `close` option to specify an array of event names that will end the iteration:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap>","rawType":["EventEmitter","<","DefaultEventMap",">"]},{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"options","description":null,"optional":true,"default":null,"type":"StaticEventEmitterIteratorOptions","rawType":["StaticEventEmitterIteratorOptions"]}],"returns":{"type":"AsyncIterator<Array<any>, any, any>","rawType":["AsyncIterator","<","Array","<","any",">","any","any",">"],"description":"An `AsyncIterator` that iterates `eventName` events emitted by the `emitter`"},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":303}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap>","rawType":["EventEmitter","<","DefaultEventMap",">"]},{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"options","description":null,"optional":true,"default":null,"type":"StaticEventEmitterOptions","rawType":["StaticEventEmitterOptions"]}],"returns":{"type":"Promise<Array<any>>","rawType":["Promise","<","Array","<","any",">",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":217}},{"name":"setMaxListeners","description":"```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"n","description":"A non-negative number. The maximum number of listeners per `EventTarget` event.","optional":true,"default":null,"type":"number","rawType":["number"]},{"name":"eventTargets","description":"Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects.","optional":false,"default":null,"type":"Array<EventEmitter<DefaultEventMap> | EventTarget>","rawType":["Array","<","EventEmitter","<","DefaultEventMap",">","EventTarget",">"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":402}}],"private":false,"properties":[{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":16},"name":"allowedExtensions","private":true,"readonly":false,"see":[],"static":false,"type":"Set<string>"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":12},"name":"baseDir","private":true,"readonly":false,"see":[],"static":false,"type":"string"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":14},"name":"dirHandlers","private":true,"readonly":false,"see":[],"static":false,"type":"Map<string, Map<'add' | 'change' | 'unlink', (\n  directory: string,\n  filename: string,\n  relativePath: string,\n  eventType: 'add' | 'change' | 'unlink'\n) => void>>"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":15},"name":"ignoredDirectories","private":true,"readonly":false,"see":[],"static":false,"type":"Set<string>"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":18},"name":"initialFiles","private":true,"readonly":false,"see":[],"static":false,"type":"Set<string>"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":17},"name":"monitoredDirectories","private":true,"readonly":false,"see":[],"static":false,"type":"Set<string>"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":11},"name":"processId","private":true,"readonly":false,"see":[],"static":false,"type":"number"},{"abstract":false,"default":null,"deprecated":false,"description":null,"metadata":{"name":"FileWatcher.ts","directory":"src","line":13},"name":"watchers","private":true,"readonly":false,"see":[],"static":false,"type":"Map<string, FSWatcher>"},{"abstract":false,"default":null,"deprecated":false,"description":"Value: `Symbol.for('nodejs.rejection')`\n\nSee how to write a custom `rejection handler`.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":452},"name":"captureRejectionSymbol","private":false,"readonly":true,"see":[],"static":true,"type":"(typeof captureRejectionSymbol)"},{"abstract":false,"default":null,"deprecated":false,"description":"Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default `captureRejections` option on all new `EventEmitter` objects.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":459},"name":"captureRejections","private":false,"readonly":false,"see":[],"static":true,"type":"boolean"},{"abstract":false,"default":null,"deprecated":false,"description":"By default, a maximum of `10` listeners can be registered for any single\nevent. This limit can be changed for individual `EventEmitter` instances\nusing the `emitter.setMaxListeners(n)` method. To change the default\nfor _all_`EventEmitter` instances, the `events.defaultMaxListeners` property\ncan be used. If this value is not a positive number, a `RangeError` is thrown.\n\nTake caution when setting the `events.defaultMaxListeners` because the\nchange affects _all_ `EventEmitter` instances, including those created before\nthe change is made. However, calling `emitter.setMaxListeners(n)` still has\nprecedence over `events.defaultMaxListeners`.\n\nThis is not a hard limit. The `EventEmitter` instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n`EventEmitter`, the `emitter.getMaxListeners()` and `emitter.setMaxListeners()` methods can be used to\ntemporarily avoid this warning:\n\n```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```\n\nThe `--trace-warnings` command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with `process.on('warning')` and will\nhave the additional `emitter`, `type`, and `count` properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts `name` property is set to `'MaxListenersExceededWarning'`.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":498},"name":"defaultMaxListeners","private":false,"readonly":false,"see":[],"static":true,"type":"number"},{"abstract":false,"default":null,"deprecated":false,"description":"This symbol shall be used to install a listener for only monitoring `'error'` events. Listeners installed using this symbol are called before the regular `'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an `'error'` event is emitted. Therefore, the process will still crash if no\nregular `'error'` listener is installed.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":445},"name":"errorMonitor","private":false,"readonly":true,"see":[],"static":true,"type":"(typeof errorMonitor)"}],"see":[]},"markdown":[]}],"functions":[],"interfaces":[],"types":[],"variables":[],"enum":[],"metadata":{"generationMs":1204.1542,"timestamp":1743867323027}}